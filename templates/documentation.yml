openapi: 3.0.0
info:
  title: "Archer API"
  description: |
    # Introduction
    Archer API is a REST API based on the adult animated sitcom Archer.

    It provides data about the show's episodes, characters and quotes.

    Github: https://github.com/ben-n93/archer_api
  version: "1.0.0"
  x-logo:
    url: 'https://www.archerapi.com/logo.png'

servers:
  - url: "/api"

x-tagGroups:
  - name: Endpoints
    tags:
      - Characters
      - "Episodes"
      - "Quotes"

components:
  schemas:
    Character:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "integer"
          description: "id of the character."
        name:
          type: "string"
          description: "Name of the character."
        aliases:
          type: "string"
          description: "Aliases/nicknames the character is known by."
        occupations:
          type: "string"
          description: "The character's current and former jobs."
        first_appearance:
          type: "string"
          description: "The episode this character first appeared in."
        voice_actor:
          type: "string"
          description: "The character's voice actor."
        quotes:
          type: "object"
          description: "List of quotes said by this character."
      
    Quote:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "integer"
          description: "id of the quote."
        quote:
          type: "string"
          description: "Quote from the show."
        character:
          type: "string"
          description: "Character who said the quote."
        episode:
          type: "string"
          description: "Episode in which the quote was said."

    Episode:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "integer"
          description: "id of the episode."
        name:
          type: "string"
          description: "Name of the episode."
        season:
          type: "integer"
          description: "Season."
        ep_number:
          type: "integer"
          description: "Episode number."
        original_air_date:
          type: "string"
          description: "Date on which the episode first aired."
        writers:
          type: "string"
          description: "People who wrote the episode."
        director:
          type: "string"
          description: "The person who directed the episode."

  parameters:
    character_id:
      name: "character_id"
      description: "The id of the resource."
      in: path
      required: True
      schema:
        type: "integer"
    ids:
      name: "ids"
      description: "IDs of the resources you want."
      in: path
      required: True
      schema:
        type: array
        items:
          type: integer
        
paths:
  /characters:
    get:
      operationId: "characters.read_all"
      tags:
        - "Characters"
      summary: "Get all characters."
      responses:
        "200":
          description: "Successfully retrieved all characters."
  /characters/{character_id}:
    get:
      operationId: "characters.read_one"
      tags:
        - "Characters"
      summary: "Get a single character"
      description: 
        You can get a single character by adding the characters's id as a parameter.
        Note that if you don't know the character's id you can filter based on their
        name - see below (*"Filtering characters"*).
      parameters:
        - $ref: "#/components/parameters/character_id"
      responses:
        "200":
          description: "Successfully retrieved character."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
              example:
                aliases: Magnum P.U.
                first_appearance: The Wind Cries Mary
                id: 8
                name: Rodney
                occupations: Requisitions officer, arms dealer
                quotes: "[]"
                voice_actor: Andrew Donnelly

  
  /quotes:
    get:
      operationId: "quotes.read_all"
      description: "You can access the list of all quotes by using the `/quotes` endpoint."
      tags:
        - "Quotes"
      summary: "Get all quotes"
      responses:
        "200":
          description: "Succesfully retrieved all quotes."
  
  /quotes/{quote_id}:
      get:
        operationId: "quotes.read_one"
        tags:
          - "Quotes"
        summary: "Get a single quote"
        description: "You can get a single quote by adding the quote's id as a parameter."
        parameters:
          - name: "quote_id"
            in: "path"
            description: "ID of the quote"
            required: true
            schema:
              type: "integer"
        responses:
          "200":
            description: "Successfully retrieved quote."
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Quote'
                example:
                  character: "Pamela Poovey"
                  episode: "Dial M for Mother"
                  id: 1
                  quote: "Sploosh."

  /quotes/random:
    get:
      operationId: "quotes.get_random"
      description: "You can get a random quote using the following endpoint: `quotes/random`"
      tags:
        - "Quotes"
      summary: "Get a random quote"
      responses:
        "200":
          description: "Successfully retrieved a random quote."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
              example: 
                  - character: "Sterling Malory Archer"
                    episode: Dial M for Mother
                    id: 14
                    quote: Grill me a cheese.

  /episodes:
    get:
      operationId: "episodes.read_all"
      tags:
        - "Episodes"
      summary: "Get all episodes"
      description: You can access the list of all episodes by using the `/episodes` endpoint.
      responses:
        "200":
          description: "Succesfully retrieved episodes."


  /episodes/{episode_id}:
      get:
        operationId: "episodes.read_one"
        description: "You can get a single episode by adding the episodes's id as a parameter."
        tags:
          - "Episodes"
        summary: "Get a single episode"
        parameters:
          - name: "episode_id"
            in: "path"
            description: "ID of the episode"
            required: true
            schema:
              type: "integer"
        
        responses:
          "200":
            description: "Successfully retrieved episode."
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Episode'
                example:
                  ep_number: 1
                  id: 2
                  name: Mole Hunt
                  original_air_date: 17 Sep, 2009
                  season: 1
                  writers: Adam Reed
                  director: Adam Reed
                