openapi: 3.0.0
info:
  title: "Archer API"
  description: |
    # Introduction
    Archer API is a REST API based on the adult animated sitcom Archer.

    It provides data about the show's episodes, characters and quotes.
  version: "1.0.0"
  x-logo:
    url: 'http://localhost:8000/logo.png'

servers:
  - url: "/api"

x-tagGroups:
  - name: Endpoints
    tags:
      - Characters
      - "Episodes"
      - "Quotes"

components:
  schemas:
    Character:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "integer"
          description: "id of the character."
          example: 101
        name:
          type: "string"
          description: "Name of the character."
          example: Nikolai Jakov
        aliases:
          type: "string"
          description: "Aliases/nicknames the character is known by."
          example: "null"
        occupations:
          type: "string"
          description: "The character's current and former jobs."
          example: Head of KGB
        first_appearance:
          type: "string"
          description: "The episode this character first appeared in."
          example: Mole Hunt
        voice_actor:
          type: "string"
          description: "The character's voice actor."
          example: Peter Newman
        quotes:
          type: "object"
          description: "List of quotes said by this character."
          example:
            - character: "Nikolai Jakov"
            - episode: "Mole Hunt"
            - id: 28
            - quote: "Who are you - Comrade Question?"

      
    Quote:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "integer"
          description: "id of the quote."
        quote:
          type: "string"
          description: "Quote from the show."
        character:
          type: "string"
          description: "Character who said the quote."
        episode:
          type: "string"
          description: "Episode in which the quote was said."

    Episode:
      type: "object"
      required:
        - id
      properties:
        id:
          type: "integer"
          description: "id of the episode."
        name:
          type: "string"
          description: "Name of the episode."
        season:
          type: "integer"
          description: "Season."
        ep_number:
          type: "integer"
          description: "Episode number."
        original_air_date:
          type: "string"
          description: "Date on which the episode first aired."

  parameters:
    id:
      name: "id"
      description: "The id of the resource."
      in: path
      required: True
      schema:
        type: "integer"
    ids:
      name: "ids"
      description: "IDs of the resources you want."
      in: path
      required: True
      schema:
        type: array
        items:
          type: integer

tags:
  - name: "Characters"
    description: 
      |
      The Characters endpoint provides information on Archer characters.
      # Character schema
      <SchemaDefinition schemaRef="#/components/schemas/Character" />
  - name: "Episodes"
    description: 
      |
      The Episodes endpoint provides information about Archer episodes.
      # Episode schema
      <SchemaDefinition schemaRef="#/components/schemas/Episode" />
  - name: "Quotes"
    description:
      |
      The Quotes endpoint provides character quotes from Archer. 
      
      Some lines (*"Phrasing!"*) are said multiple times throughought the series, in which case the `episode`
      property refers to the first episode the quote was said in.
      # Quote schema
      <SchemaDefinition schemaRef="#/components/schemas/Quote" />

paths:
  /characters:
    get:
      operationId: "characters.read_all" # Module and function.
      tags:
        - "Characters"
      summary: "Get all characters" # Left sidebar text.
      description: You can access the list of all characters by using the `/characters` endpoint. # Middle column text.
      responses:
        "200":
          description: "Successfully retrieved all characters."

  /characters/8:
    get:
      operationId: "characters.read_one"
      tags:
        - "Characters"
      summary: "Get a single character"
      description: 
        You can get a single character by adding the characters's id as a parameter.
        Note that if you don't know the character's id you can filter based on their
        name - see below (*"Filtering characters"*).
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "Successfully retrieved character."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
              example:
                aliases: Magnum P.U.
                first_appearance: The Wind Cries Mary
                id: 8
                name: Rodney
                occupations: Requisitions officer, arms dealer
                quotes: "[]"
                voice_actor: Andrew Donnelly
  /characters/1,10:
    get:
      operationId: "characters.read_multiple"
      tags:
        - "Characters"
      summary: "Get multiple characters"
      description: 
        "You can get multiple characers by passing ids seperated by commas: `characters/1,10`"
      parameters:
        - $ref: "#/components/parameters/ids"
      responses:
        "200":
          description: "Successfully retrieved characters"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
              example:
                    - aliases: "Count Snackula"
                      first_appearance: "Mole Hunt"
                      id: 1
                      name: "Bilbo"
                      occupations: "ISIS Support"
                      quotes: []
                      voice_actor: "Adam Reed"
                    - aliases: "The Needle"
                      first_appearance: "Killing Utne"
                      id: 10
                      name: "Elke Hubsch"
                      occupations: "Spy, assassin"
                      quotes: []
                      voice_actor: "Audrey Wasilewski"
                

  /characters?name={Bilbo}:
    get:
      summary: "Filtering characters"
      tags:
        - "Characters"
      description: "You can filter characters using the name parameter in the URL. 
      To start filtering add a ? to the `characters` endpoint followed by `name={value}`. For example,
      `name=Bilbo`. 
      "
      responses:
              "200":
                description: "Successfully retrieved characters"
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Character'
                    example:
                          - aliases: "Count Snackula"
                            first_appearance: "Mole Hunt"
                            id: 1
                            name: "Bilbo"
                            occupations: "ISIS Support"
                            quotes: []
                            voice_actor: "Adam Reed"

  /quotes:
    get:
      operationId: "quotes.read_all"
      tags:
        - "Quotes"
      summary: "Get all quotes."
      responses:
        "200":
          description: "Succesfully retrieved all quotes."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
              example:
                  character: "Sterling Malory Archer"
                  episode: "Killing Utne"
                  id: 1
                  quote: "Phrasing!"
  
  /quotes/{id}:
      get:
        operationId: "quotes.read_one"
        tags:
          - "Quotes"
        summary: "Get a single quote."
        parameters:
          - $ref: "#/components/parameters/id"
        responses:
          "200":
            description: "Successfully retrieved quote."
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Quote'
                example:
                  character: "Pamela Poovey"
                  episode: "Dial M for Mother"
                  id: 1
                  quote: "Sploosh."
  /quotes/{ids}:
    get:
      operationId: "quotes.read_multiple"
      tags:
        - "Quotes"
      summary: "Get multiple quotes."
      parameters:
        - $ref: "#/components/parameters/ids"
      responses:
        "200":
          description: "Successfully retrieved quotes."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
              example:
                - character: Cheryl Tunt
                  episode: Training Day
                  id: 3
                  quote: You're not my supervisor!
                - character: Pamela Poovey
                  episode: Skorpio
                  id: 6
                  quote: Pipe down, pipe cleaner!

  /quotes?name={value}:
    get:
      summary: "Filtering quotes."
      tags:
        - "Quotes"
      parameters:
        - test: test
  
  /quotes/random:
    get:
      operationId: "quotes.get_random"
      tags:
        - "Quotes"
      summary: "Get a random quote."
      responses:
        "200":
          description: "Successfully retrieved a random quote."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
              example: 
                  - character: "Sterling Malory Archer"
                    episode: Dial M for Mother
                    id: 14
                    quote: Grill me a cheese.


  /episodes:
    get:
      operationId: "episodes.read_all"
      tags:
        - "Episodes"
      summary: "Get all episodes."
      responses:
        "200":
          description: "Succesfully retrieved episodes."
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Episode'
  /episodes/{id}:
      get:
        operationId: "episodes.read_one"
        tags:
          - "Episodes"
        summary: "Get a single episode."
        parameters:
          - $ref: "#/components/parameters/id"
        responses:
          "200":
            description: "Successfully retrieved episode."
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Episode'
  /episodes/{ids}:
    get:
      operationId: "episodes.read_multiple"
      tags:
        - "Episodes"
      summary: "Get multiple episodes."
      parameters:
        - $ref: "#/components/parameters/ids"
      responses:
        "200":
          description: "Successfully retrieved episodes."
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Episode'
